{
	"$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "metadata": {
        "description": "Application Name"
      }
    },
    "environment": {
      "type": "string",
      "allowedValues": [
        "dev",
        "uat",
        "prd"
    ],      
      "metadata": {
        "description": "Environment code"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
          "description": "Location for all the resources"
      }
    },
    "servicePlanPricingTier": {
      "type": "string",
      "allowedValues": [
          "S1",
          "S2",
          "S3",
          "P1V2",
          "P2V2",
          "P2V3"
      ],
      "defaultValue": "S1",
      "metadata": {
          "description": "App Service Plan Pricing Tier"
      }
    },
    "create_WindowsBatchPool": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "create Windows 2019 Batch Pool with container"
      }      
    },
    "create_UbuntuBatchPool": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "create Ubuntu 20.04 Batch Pool with container"
      }
    },
    "AzureDevOpsIpRange": {
      "type":"string",
      "defaultValue":"40.74.28.0/23",
      "metadata": {
        "description": "Plage IP du service Azure DevOps."
      }
    },
    "BatchAccountPoolVMType":{
      "type": "string",
      "defaultValue": "Standard_F2s_v2",
      "allowedValues": [
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_D2_v3"
      ],      
      "metadata": {
        "description": "Node VM Size"
      }
    },
    "TaskSlotsPerNode":{
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Nb Tasks can be runned in same time by a node."
      }
    },
    "AzDOUrl":{
      "type": "string",      
      "metadata": {
        "description": "Url de votre organisation Azure DevOps"
      }
    },
    "AzDOToken":{
      "type": "string",      
      "metadata": {
        "description": "PAT généré pour enregistrer vos agents dans votre votre organisation Azure DevOps"
      }
    },
    "AzDOUbuntuPool":{
      "type": "string",      
      "metadata": {
        "description": "PAT généré pour enregistrer vos agents dans votre votre organisation Azure DevOps"
      }
    },    
    "AzDOWindowsPool":{
      "type": "string",      
      "metadata": {
        "description": "PAT généré pour enregistrer vos agents dans votre votre organisation Azure DevOps"
      }
    }                
  },
  "variables": {
    "servicePlanPricingTiers": {
        "F1": {
            "tier": "Free"
        },
        "B1": {
            "tier": "Basic"
        },
        "B2": {
            "tier": "Basic"
        },
        "B3": {
            "tier": "Basic"
        },
        "S1": {
            "tier": "Standard"
        },
        "S2": {
            "tier": "Standard"
        },
        "S3": {
            "tier": "Standard"
        },
        "P1V2": {
            "tier": "Standard"
        },
        "P2V2": {
            "tier": "Standard"
        },
        "P2V3": {
            "tier": "Standard"
        }
    },    
    "net_api": "2021-05-01",
    "pln_api": "2021-02-01",
    "web_api": "2021-02-01",
    "containerRegistry_api": "2021-09-01",
    "batchAccount_api": "2021-06-01",
    "storageAccount_api": "2021-06-01",
    "blobService_api": "2021-06-01",
    "privateEndpoint_api": "2021-05-01",
    "resourcedeployment_api": "2021-04-01",
    "privateDnsZones_api": "2020-06-01",
    "sto_name": "[concat(parameters('appName') , parameters('environment') , 'sto')]",
    "net_name": "[concat(parameters('appName') , '-' , parameters('environment') , '-net')]",
    "pln_name": "[concat(parameters('appName') , '-' , parameters('environment') , '-pln')]",
    "fun_name": "[concat(parameters('appName') , '-' , parameters('environment') , '-fun')]",
    "batchAccount_name": "[concat(parameters('appName') , parameters('environment') , 'aba')]",
    "containerRegistry_name": "[concat(parameters('appName') , parameters('environment') , 'acr')]",
    "acrprivateEndpoint_name": "[concat(parameters('appName') , '-' , parameters('environment') , '-acr-pep')]",
    "storageAccountid": "[concat(resourceGroup().id, '/providers/', 'Microsoft.Storage/storageAccounts/', parameters('appName') , parameters('environment') , 'sto')]",
    "batchAccountid": "[concat(resourceGroup().id, '/providers/', 'Microsoft.Batch/batchAccounts/', variables('batchAccount_name'))]",
    "containerRegistryid": "[concat(resourceGroup().id, '/providers/', 'Microsoft.ContainerRegistry/registries/', variables('containerRegistry_name'))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('net_api')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('net_name')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "192.168.1.0/24"
          ]
        },
        "subnets": [
          {
            "name": "batch",
            "properties": {
                "addressPrefix": "192.168.1.0/27",
                "delegations": []
            }
          },
          {
            "name": "registry",
            "properties": {
                "addressPrefix": "192.168.1.32/27",
                "delegations": [],
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "function",
            "properties": {
                "addressPrefix": "192.168.1.64/27",
                "serviceEndpoints": [
                  {
                    "service": "Microsoft.Storage",
                    "locations": [
                      "*"
                    ]
                  }
                ],
                "delegations": [
                    {
                        "name": "delegation",
                        "properties": {
                            "serviceName": "Microsoft.Web/serverfarms"
                        }
                    }
                ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "[variables('containerRegistry_api')]",
      "name": "[variables('containerRegistry_name')]",
      "location": "[parameters('location')]",
      "sku": {
          "name": "Premium",
          "tier": "Premium"
      },
      "dependsOn": [
          "[resourceId('Microsoft.Network/virtualNetworks', variables('net_name'))]"
      ],      
      "properties": {
          "adminUserEnabled": true,
          "networkRuleSet": {
              "defaultAction": "Deny",
              "virtualNetworkRules": [],
              "ipRules": [
                  {
                      "action": "Allow",
                      "value": "91.160.70.159"
                  },
                  {
                      "action": "Allow",
                      "value": "90.105.5.193"
                  }
              ]
          },
          "policies": {
              "quarantinePolicy": {
                  "status": "disabled"
              },
              "trustPolicy": {
                  "type": "Notary",
                  "status": "disabled"
              },
              "retentionPolicy": {
                  "days": 7,
                  "status": "disabled"
              },
              "exportPolicy": {
                  "status": "enabled"
              }
          },
          "encryption": {
              "status": "disabled"
          },
          "dataEndpointEnabled": false,
          "publicNetworkAccess": "Enabled",
          "networkRuleBypassOptions": "AzureServices",
          "zoneRedundancy": "Disabled",
          "anonymousPullEnabled": false
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "[variables('privateEndpoint_api')]",
      "name": "[variables('acrprivateEndpoint_name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
          "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistry_name'))]",
          "[resourceId('Microsoft.Network/virtualNetworks', variables('net_name'))]"
      ],
      "properties": {
          "privateLinkServiceConnections": [
              {
                  "name": "[variables('acrprivateEndpoint_name')]",
                  "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistry_name'))]",
                      "groupIds": [
                          "registry"
                      ]
                  }
              }
          ],
          "manualPrivateLinkServiceConnections": [],
          "subnet": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('net_name'), 'registry')]"
          },
          "customDnsConfigs": []
      }
    },
    {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "[variables('privateDnsZones_api')]",
        "name": "[string('privatelink.azurecr.io')]",
        "location": "global",
        "tags": {},
        "properties": {}
    },
    {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "[variables('privateDnsZones_api')]",
        "name": "[concat(string('privatelink.azurecr.io'), '/', uniqueString(resourceId('Microsoft.Network/virtualNetworks', variables('net_name'))))]",
        "location": "global",
        "dependsOn": [
            "[string('privatelink.azurecr.io')]"
        ],
        "properties": {
            "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('net_name'))]"
            },
            "registrationEnabled": false
        }
    },    
    {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "[variables('resourcedeployment_api')]",
        "name": "[concat('EndpointDnsRecords-', uniqueString(resourceId('Microsoft.Network/virtualNetworks', variables('net_name'))))]",
        "dependsOn": [
            "[string('privatelink.azurecr.io')]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('net_name'))]",
            "[resourceId('Microsoft.Network/privateEndpoints', variables('acrprivateEndpoint_name'))]"
        ],
        "properties": {
            "mode": "Incremental",
            "templatelink": {
                "contentVersion": "1.0.0.0",
                "uri": "https://containerregistry.hosting.portal.azure.net/containerregistry/Content/1.0.20211203.5/DeploymentTemplates/PrivateDnsForPrivateEndpoint.json"
            },
            "parameters": {
                "privateDnsName": {
                    "value": "[string('privatelink.azurecr.io')]"
                },
                "privateEndpointNicResourceId": {
                    "value": "[reference(variables('acrprivateEndpoint_name'), variables('privateEndpoint_api')).networkInterfaces[0].id]"
                },
                "nicRecordsTemplateUri": {
                    "value": "https://containerregistry.hosting.portal.azure.net/containerregistry/Content/1.0.20211203.5/DeploymentTemplates/PrivateDnsForPrivateEndpointNic.json"
                },
                "ipConfigRecordsTemplateUri": {
                    "value": "https://containerregistry.hosting.portal.azure.net/containerregistry/Content/1.0.20211203.5/DeploymentTemplates/PrivateDnsForPrivateEndpointIpConfig.json"
                },
                "uniqueId": {
                    "value": "[uniqueString(resourceId('Microsoft.Network/virtualNetworks', variables('net_name')))]"
                },
                "existingRecords": {
                    "value": {}
                }
            }
        }
    },
    {
      "type": "Microsoft.Batch/batchAccounts",
      "apiVersion": "[variables('batchAccount_api')]",
      "name": "[variables('batchAccount_name')]",
      "location": "[parameters('location')]",
      "identity": {
          "type": "SystemAssigned"
      },
      "properties": {
          "poolAllocationMode": "BatchService",
          "publicNetworkAccess": "Enabled",
          "encryption": {
              "keySource": "Microsoft.Batch"
          },
          "allowedAuthenticationModes": [
              "SharedKey",
              "AAD",
              "TaskAuthenticationToken"
          ]
      }
    },
    {
      "condition":"[parameters('create_WindowsBatchPool')]",
      "type": "Microsoft.Batch/batchAccounts/pools",
      "apiVersion": "[variables('batchAccount_api')]",
      "name": "[concat(variables('batchAccount_name'), '/batchWindows')]",
      "dependsOn": [
          "[resourceId('Microsoft.Batch/batchAccounts', variables('batchAccount_name'))]",
          "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistry_name'))]",
          "[resourceId('Microsoft.Network/virtualNetworks', variables('net_name'))]"
      ],
      "properties": {
          "vmSize": "[parameters('BatchAccountPoolVMType')]",
          "interNodeCommunication": "Disabled",
          "taskSlotsPerNode": "[parameters('TaskSlotsPerNode')]",
          "taskSchedulingPolicy": {
              "nodeFillType": "Pack"
          },
          "deploymentConfiguration": {
              "virtualMachineConfiguration": {
                  "imageReference": {
                      "publisher": "microsoftwindowsserver",
                      "offer": "windowsserver",
                      "sku": "2019-datacenter-with-containers-smalldisk",
                      "version": "latest"
                  },
                  "nodeAgentSkuId": "batch.node.windows amd64",
                  "windowsConfiguration": {
                      "enableAutomaticUpdates": false
                  },
                  "containerConfiguration": {
                      "type": "DockerCompatible",
                      "containerImageNames": [
                          "[concat(reference(variables('containerRegistryid'), variables('containerRegistry_api')).loginServer, '/azdo-agent:windows-core-ltsc2019-azdo')]"
                      ],
                      "containerRegistries": [
                          {
                              "registryServer": "[reference(variables('containerRegistryid'), variables('containerRegistry_api')).loginServer]",
                              "username": "[listCredentials(variables('containerRegistryid'), variables('containerRegistry_api')).username]",
                              "password": "[listCredentials(variables('containerRegistryid'), variables('containerRegistry_api')).passwords[0].value]"
                          }
                      ]
                  },
                  "nodePlacementConfiguration": {
                      "policy": "Regional"
                  }
              }
          },
          "networkConfiguration": {
              "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('net_name'), 'batch')]",
              "publicIPAddressConfiguration": {
                  "provision": "BatchManaged"
              }
          },
          "scaleSettings": {
              "autoScale": {
                  "formula": "$nbTaskPerNodes = $TaskSlotsPerNode;\n$currentNodes = $TargetDedicatedNodes;\n$nbPending5min = $PendingTasks.GetSamplePercent(TimeInterval_Minute * 5) < 70 ? max($PendingTasks.GetSample(1)) : max($PendingTasks.GetSample(TimeInterval_Minute * 5));\n$nbPending60min =  $PendingTasks.GetSamplePercent(TimeInterval_Minute * 60) < 70 ? max($PendingTasks.GetSample(1)) : max($PendingTasks.GetSample(TimeInterval_Minute * 60));\n$totalLowPriorityNodes = $nbPending5min > max(0, $TaskSlotsPerNode * $currentNodes) ? $currentNodes + 1 : $currentNodes;\n$totalLowPriorityNodes = $nbPending60min <= $TaskSlotsPerNode * max(0, $currentNodes - 1)  ? $currentNodes - 1 : $totalLowPriorityNodes;\n$totalLowPriorityNodes = min(4, max($totalLowPriorityNodes, 0));\n$TargetDedicatedNodes = $totalLowPriorityNodes;\n$NodeDeallocationOption = taskcompletion;",
                  "evaluationInterval": "PT5M"
              }
          }
      }
    },
    {
      "condition":"[parameters('create_UbuntuBatchPool')]",
      "type": "Microsoft.Batch/batchAccounts/pools",
      "apiVersion": "[variables('batchAccount_api')]",
      "name": "[concat(variables('batchAccount_name'), '/batchLinux')]",
      "dependsOn": [
          "[resourceId('Microsoft.Batch/batchAccounts', variables('batchAccount_name'))]",
          "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistry_name'))]",
          "[resourceId('Microsoft.Network/virtualNetworks', variables('net_name'))]"
      ],
      "properties": {
          "vmSize": "[parameters('BatchAccountPoolVMType')]",
          "interNodeCommunication": "Disabled",
          "taskSlotsPerNode": "[parameters('TaskSlotsPerNode')]",
          "taskSchedulingPolicy": {
              "nodeFillType": "Pack"
          },
          "deploymentConfiguration": {
              "virtualMachineConfiguration": {
                  "imageReference": {
                    "publisher": "microsoft-azure-batch",
                    "offer": "ubuntu-server-container",
                    "sku": "20-04-lts",
                    "version": "latest"
                  },
                  "nodeAgentSkuId": "batch.node.ubuntu 20.04",

                  "containerConfiguration": {
                      "type": "DockerCompatible",
                      "containerImageNames": [
                          "[concat(reference(variables('containerRegistryid'), variables('containerRegistry_api')).loginServer, '/azdo-agent:ubuntu-20.04-azdo')]",
                          "[concat(reference(variables('containerRegistryid'), variables('containerRegistry_api')).loginServer, '/azdo-agent:ubuntu-18.04-azdo')]"
                      ],
                      "containerRegistries": [
                          {
                              "registryServer": "[reference(variables('containerRegistryid'), variables('containerRegistry_api')).loginServer]",
                              "username": "[listCredentials(variables('containerRegistryid'), variables('containerRegistry_api')).username]",
                              "password": "[listCredentials(variables('containerRegistryid'), variables('containerRegistry_api')).passwords[0].value]"
                          }
                      ]
                  },
                  "nodePlacementConfiguration": {
                      "policy": "Regional"
                  }
              }
          },
          "networkConfiguration": {
              "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('net_name'), 'batch')]",
              "publicIPAddressConfiguration": {
                  "provision": "BatchManaged"
              }
          },
          "scaleSettings": {
              "autoScale": {
                  "formula": "$nbTaskPerNodes = $TaskSlotsPerNode;\n$currentNodes = $TargetDedicatedNodes;\n$nbPending5min = $PendingTasks.GetSamplePercent(TimeInterval_Minute * 5) < 70 ? max($PendingTasks.GetSample(1)) : max($PendingTasks.GetSample(TimeInterval_Minute * 5));\n$nbPending60min =  $PendingTasks.GetSamplePercent(TimeInterval_Minute * 60) < 70 ? max($PendingTasks.GetSample(1)) : max($PendingTasks.GetSample(TimeInterval_Minute * 60));\n$totalLowPriorityNodes = $nbPending5min > max(0, $TaskSlotsPerNode * $currentNodes) ? $currentNodes + 1 : $currentNodes;\n$totalLowPriorityNodes = $nbPending60min <= $TaskSlotsPerNode * max(0, $currentNodes - 1)  ? $currentNodes - 1 : $totalLowPriorityNodes;\n$totalLowPriorityNodes = min(4, max($totalLowPriorityNodes, 0));\n$TargetDedicatedNodes = $totalLowPriorityNodes;\n$NodeDeallocationOption = taskcompletion;",
                  "evaluationInterval": "PT5M"
              }
          }
      }
    },                   
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "[variables('pln_api')]",
      "name": "[variables('pln_name')]",
      "location": "[parameters('location')]",
      "properties": {
        "name": "[variables('pln_name')]",
        "reserved": true
      },
      "sku": {
        "name": "[parameters('servicePlanPricingTier')]",
        "tier": "[variables('servicePlanPricingTiers')[parameters('servicePlanPricingTier')].tier]"
      },
      "kind": "linux"
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "[variables('storageAccount_api')]",
      "name": "[variables('sto_name')]",
      "kind": "StorageV2",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('net_name'), 'function')]",
              "action": "Allow"
            }
          ],
          "ipRules": [],
          "defaultAction": "Deny"
        },
        "supportsHttpsTrafficOnly": true,
        "publicAccess": "Container",
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('net_name'))]"
      ]      
    },
    {
      "name": "[concat(variables('sto_name'), '/default/azure-webjobs-secrets')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "[variables('blobService_api')]",
      "properties": {
        "immutableStorageWithVersioning": {
          "enabled": false
        },
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sto_name'))]"
      ]
    },  
    {
      "name": "[concat(variables('sto_name'), '/default/azure-webjobs-hosts')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "[variables('blobService_api')]",
      "properties": {
        "immutableStorageWithVersioning": {
          "enabled": false
        },
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sto_name'))]"
      ]
    },      
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "[variables('web_api')]",
      "name": "[variables('fun_name')]",
      "location": "[parameters('location')]",
      "kind": "functionapp,linux",
      "properties": {
        "name": "[variables('fun_name')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('pln_name'))]",
        "httpsOnly": true,
        "siteConfig": {
          "http20Enabled": false,
          "alwaysOn": true,
          "ftpsState": "Disabled",
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('sto_name'),';AccountKey=',listKeys(variables('storageAccountid'), variables('storageAccount_api')).keys[0].value,';BlobEndpoint=https://', variables('sto_name'), '.blob.core.windows.net/;QueueEndpoint=https://', variables('sto_name'), '.queue.core.windows.net/;TableEndpoint=https://', variables('sto_name'),'.table.core.windows.net/;FileEndpoint=https://', variables('sto_name'),'.file.core.windows.net/')]"
            },
            {
              "name": "BatchAccountKey",
              "value": "[listKeys(variables('batchAccountid'), variables('batchAccount_api')).primary]"
            },
            {
              "name": "BatchAccountName",
              "value": "[variables('batchAccount_name')]"
            },
            {
              "name": "BatchAccountUrl",
              "value": "[reference(variables('batchAccountid'), variables('batchAccount_api')).accountEndpoint]"
            },
            {
              "name": "ContainerRegistryServer",
              "value": "[reference(variables('containerRegistryid'), variables('containerRegistry_api')).loginServer]"
            },
            {
              "name": "MaxParallelTasks",
              "value": "[parameters('AzDOWindowsPool')]"
            },            
            {
              "name": "AzDOUrl",
              "value": "[parameters('AzDOUrl')]"
            },
            {
              "name": "AzDOToken",
              "value": "[parameters('AzDOToken')]"
            },
            {
              "name": "AzDOUbuntuPool",
              "value": "[parameters('AzDOUbuntuPool')]"
            },
            {
              "name": "AzDOWindowsPool",
              "value": "[parameters('AzDOWindowsPool')]"
            },                                                
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            }
          ]
        }
      },     
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('pln_name'))]",
        "[resourceId('Microsoft.Batch/batchAccounts', variables('batchAccount_name'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistry_name'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('sto_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('net_name'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/networkConfig",
      "apiVersion": "[variables('web_api')]",
      "name": "[concat(variables('fun_name'), '/virtualNetwork')]",
      "location": "[parameters('location')]",
      "properties": {
        "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('net_name'), 'function')]",
        "isSwift": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('fun_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('net_name'))]"
      ]
    },    
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "[variables('web_api')]",
      "name": "[concat(variables('fun_name'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
          "[resourceId('Microsoft.Web/sites', variables('fun_name'))]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('sto_name'))]"
      ],
      "properties": {
          "linuxFxVersion": "DOTNET|6.0",
          "appCommandLine": "",
          "ipSecurityRestrictions": [
            {
                "ipAddress": "[parameters('AzureDevOpsIpRange')]",
                "action": "Allow",
                "tag": "Default",
                "priority": 100,
                "name": "AzureDevOps"
            },
            {
                "vnetSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('net_name'), 'batch')]",
                "action": "Allow",
                "tag": "Default",
                "priority": 200,
                "name": "onlyVmAgentPool"
            },
            {
                "ipAddress": "Any",
                "action": "Deny",
                "priority": 2147483647,
                "name": "Deny all",
                "description": "Deny all access"
            }
          ],
          "scmIpSecurityRestrictions": [
            {
                "vnetSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('net_name'), 'batch')]",
                "action": "Allow",
                "tag": "Default",
                "priority": 100,
                "name": "onlyVmAgentPool"
            },
            {
                "ipAddress": "Any",
                "action": "Deny",
                "priority": 2147483647,
                "name": "Deny all",
                "description": "Deny all access"
            }
          ]
      }
    }    
  ]
}
