name: $(date:yyyyMMdd)$(rev:.r)

trigger:
- main 

parameters:
- name: devResourceGroupName
  displayName: 'Resource group name'
  type: string
  default: 'poc001'
- name: create_WindowsBatchPool
  displayName: 'Create Windows Batch Pool'
  type: boolean
  default: false
- name: create_UbuntuBatchPool
  displayName: 'Create Ubuntu Batch Pool'
  type: boolean
  default: false
- name: allowBatchPublicNetworkAccess
  displayName: 'Allow Batch public network access'
  type: boolean
  default: false

variables:
  azureSubscription: 'Azure2'
  buildConfiguration: 'Release'
  projectName: 'AzFunction.BatchOrchestrator'
  infraPath: '$(Build.SourcesDirectory)/arm/'
  projectPath: '$(Build.SourcesDirectory)/src/$(projectName)/$(projectName).csproj'

stages:
- stage: 'Build'
  displayName: 'Build FunctionApp & Validate ARM Template'
  jobs:
  - job: BuildFunctionApp
    displayName: Build FunctionApp
    cancelTimeoutInMinutes: 1
    pool:
      vmImage: 'windows-2022'
    steps:
    - checkout: self
      clean: true
    - task: gittools.usegitversion.gitversion-task.UseGitVersion@5
      displayName: GitVersion
      inputs:
        versionSpec: 5.6.x              
    - task: DotNetCoreCLI@2
      displayName: 'Restore packages of the $(projectName) function'
      inputs:
        command: restore
        projects: $(projectPath)
        feedsToUse: config
        nugetConfigPath: NuGet.Config
    - task: DotNetCoreCLI@2
      displayName: 'Build the $(projectName) function'
      inputs:
        projects: '$(projectPath)'
        arguments: '-c $(buildConfiguration) --no-restore'
    - task: DotNetCoreCLI@2
      displayName: 'Publish and Zip the $(projectName) function'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '$(projectPath)'
        arguments: '-o $(Build.ArtifactStagingDirectory)/Function -c $(buildConfiguration) --no-build'
        zipAfterPublish: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'Schedule'))
  - job: ValidateARMTemplate
    displayName: Validate ARM Template
    cancelTimeoutInMinutes: 1
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
    - task: gittools.usegitversion.gitversion-task.UseGitVersion@5
      displayName: GitVersion
      inputs:
        versionSpec: 5.6.x              
    - task: AzureResourceGroupDeployment@2
      displayName: 'ARM template validation'
      inputs:
        azureSubscription: '$(azureSubscription)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '${{ parameters.devResourceGroupName }}'
        location: 'West Europe'
        templateLocation: 'Linked artifact'
        csmFile: '$(infraPath)azuredeploy.json'
        csmParametersFile: '$(infraPath)azuredeploy.parameters.json'
        overrideParameters: '-appName ${{ parameters.devResourceGroupName }}'
        deploymentMode: 'Validation'
    - task: ArchiveFiles@2
      displayName: 'Archive template'
      inputs:
        rootFolderOrFile: '$(infraPath)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/Infra/$(Build.BuildNumber).zip'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'Schedule')) 
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'Schedule')) 

- stage: 'Deploy'
  displayName: 'Deploy to the environment'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: DEV
    condition: and(succeeded(), ne(variables['Build.Reason'], 'Schedule')) 
    variables:
    - group: 'DEV Configuration'
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:
            - task: ExtractFiles@1
              inputs:
                archiveFilePatterns: '$(Pipeline.Workspace)/drop/Infra/*.zip'
                destinationFolder: '$(Pipeline.Workspace)/Extract'
                cleanDestinationFolder: true
                overwriteExistingFiles: false

            - ${{ if eq(parameters.create_WindowsBatchPool, true) }}:
              - script: echo '##vso[task.setvariable variable=CreateWindowsPool]true'
                displayName: "Set CreateWindowsPool = 'true' "

            - ${{ if eq(parameters.create_WindowsBatchPool, false) }}:
              - script: echo '##vso[task.setvariable variable=CreateWindowsPool]false'
                displayName: "Set CreateWindowsPool = 'false' "

            - ${{ if eq(parameters.create_UbuntuBatchPool, true) }}:
              - script: echo '##vso[task.setvariable variable=CreateUbuntuPool]true'
                displayName: "Set CreateUbuntuPool = 'true' "

            - ${{ if eq(parameters.create_UbuntuBatchPool, false) }}:
              - script: echo '##vso[task.setvariable variable=CreateUbuntuPool]false'
                displayName: "Set CreateUbuntuPool = 'false' "

            - ${{ if eq(parameters.allowBatchPublicNetworkAccess, true) }}:
              - task: AzureResourceGroupDeployment@2
                displayName: 'ARM template execution'
                inputs:
                  azureSubscription: '$(azureSubscription)'
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: '${{ parameters.devResourceGroupName }}'
                  location: 'West Europe'
                  templateLocation: 'Linked artifact'
                  csmFile: '$(Pipeline.Workspace)/Extract/azuredeploy-allowBatchPublicNetworkAccess.json'
                  csmParametersFile: '$(Pipeline.Workspace)/Extract/azuredeploy.parameters.json'
                  overrideParameters: '-appName ${{ parameters.devResourceGroupName }} -create_WindowsBatchPool $(CreateWindowsPool) -create_UbuntuBatchPool $(CreateUbuntuPool) -AzDOUrl $(AzDOUrl) -AzDOToken $(AzDOToken) -AzDOUbuntuPool $(AzDOUbuntuPool) -AzDOWindowsPool $(AzDOWindowsPool) -GithubToken $(GithubToken)'
                  deploymentMode: 'Incremental'

            - ${{ if eq(parameters.allowBatchPublicNetworkAccess, false) }}:
              - task: AzureResourceGroupDeployment@2
                displayName: 'ARM template execution'
                inputs:
                  azureSubscription: '$(azureSubscription)'
                  action: 'Create Or Update Resource Group'
                  resourceGroupName: '${{ parameters.devResourceGroupName }}'
                  location: 'West Europe'
                  templateLocation: 'Linked artifact'
                  csmFile: '$(Pipeline.Workspace)/Extract/azuredeploy.json'
                  csmParametersFile: '$(Pipeline.Workspace)/Extract/azuredeploy.parameters.json'
                  overrideParameters: '-appName ${{ parameters.devResourceGroupName }} -create_WindowsBatchPool $(CreateWindowsPool) -create_UbuntuBatchPool $(CreateUbuntuPool) -AzDOUrl $(AzDOUrl) -AzDOToken $(AzDOToken) -AzDOUbuntuPool $(AzDOUbuntuPool) -AzDOWindowsPool $(AzDOWindowsPool)'
                  deploymentMode: 'Incremental'

            - task: AzureCLI@2
              displayName: 'Import Docker Image from dockerhub'
              inputs:
                azureSubscription: '$(azureSubscription)'
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az acr update --name ${{ parameters.devResourceGroupName }}devacr --public-network-enabled true
                  az acr import -n ${{ parameters.devResourceGroupName }}devacr --source docker.io/pmorisseau/azdo-agent:ubuntu-20.04-azdo -t azdo-agent:ubuntu-20.04-azdo --force
                  az acr import -n ${{ parameters.devResourceGroupName }}devacr --source docker.io/pmorisseau/azdo-agent:ubuntu-18.04-azdo -t azdo-agent:ubuntu-18.04-azdo --force
                  az acr import -n ${{ parameters.devResourceGroupName }}devacr --source docker.io/pmorisseau/azdo-agent:windows-core-ltsc2019-azdo -t azdo-agent:windows-core-ltsc2019-azdo --force
                  az acr import -n ${{ parameters.devResourceGroupName }}devacr --source docker.io/pmorisseau/githubactions-runner:ubuntu-20.04-actionsrunner -t githubactions-runner:ubuntu-20.04-actionsrunner --force
                  az acr import -n ${{ parameters.devResourceGroupName }}devacr --source docker.io/pmorisseau/githubactions-runner:ubuntu-18.04-actionsrunner -t githubactions-runner:ubuntu-18.04-actionsrunner --force
                  az acr import -n ${{ parameters.devResourceGroupName }}devacr --source docker.io/pmorisseau/githubactions-runner:windows-core-ltsc2019-actionsrunner -t githubactions-runner:windows-core-ltsc2019-actionsrunner --force
                  az acr update --name ${{ parameters.devResourceGroupName }}devacr --public-network-enabled false

            - task: AzureCLI@2
              displayName: 'Open firewall for source code push'
              inputs:
                azureSubscription: '$(azureSubscription)'
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  $ip = Invoke-RestMethod http://ipinfo.io/json | Select -exp ip
                  az webapp config access-restriction add -n ${{ parameters.devResourceGroupName }}-dev-fun -g ${{ parameters.devResourceGroupName }} --rule-name MSHostedAgent --scm-site true --action Allow --ip-address $ip --priority 200

            - task: AzureFunctionApp@1
              inputs:
                azureSubscription: '$(azureSubscription)'
                appType: 'functionAppLinux'
                appName: '${{ parameters.devResourceGroupName }}-dev-fun'
                package: '$(Pipeline.Workspace)/drop/Function/$(projectName).zip'

            - task: AzureCLI@2
              displayName: 'Close firewall for source code push'
              inputs:
                azureSubscription: '$(azureSubscription)'
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az webapp config access-restriction remove -n ${{ parameters.devResourceGroupName }}-dev-fun -g ${{ parameters.devResourceGroupName }} --rule-name MSHostedAgent --scm-site true